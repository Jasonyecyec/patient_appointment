@model patient_appointment.DBModel.user

@{
    Layout = null;
    ViewBag.alertMessage = TempData["alert-message"];
}

<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
     <title>UserProfile</title>

     @* == SWEET ALERT == *@
     <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
     <script src="sweetalert2.min.js"></script>
     <link rel="stylesheet" href="sweetalert2.min.css">

     <link href="~/Content/User/userProfile.css" rel="stylesheet" />

     <style>
         .user-link:nth-of-type(1) {
             background-color: #008BFF;
            border-radius:10px;
            transition:250ms ease-in-out;
         }
             .user-link:nth-of-type(1):hover {
                 background-color: #0268C6;
             }
             .user-link:nth-of-type(1) a {
                 color: white;
             }
     </style>
 </head>
<body>

    <div class="main-content">
        <div>
            @Html.Partial("Sidebar");
        </div>

        <div class="user-profile-wrapper">

            <div class="user-profile-container">
                <div>
                    <h1 class="user-profile-text">User Profile</h1>
                </div>

                <div class="update-user-form">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                    <div class="fname update-input-container">
                        <p>First name</p>
                        <fieldset disabled class="disabled-field">
                            @Html.TextBoxFor(model => model.first_name, new { @class = "form-control" })
                        </fieldset>
                    </div>
                  
                    <div class="lname update-input-container">
                        <p>Last name</p>
                        <fieldset disabled class="disabled-field">
                            @Html.TextBoxFor(model => model.last_name, new { @class = "form-control" })
                        </fieldset>
                    </div>

                    <div class="phone update-input-container">
                        <p>Phone number</p>
                        <fieldset disabled class="disabled-field">
                            @Html.TextBoxFor(model => model.phone_number, new { @class = "form-control" })
                        </fieldset>
                    </div>

 
                    <div class="email update-input-container">
                        <p>Email</p>
                        <fieldset disabled class="disabled-field">
                            @Html.TextBoxFor(model => model.email, new { @class = "form-control" })

                        </fieldset>
                    </div>
     

                    <div class="address update-input-container">
                        <p>Address</p>

                        <fieldset disabled class="disabled-field">
                            @Html.TextBoxFor(model => model.address, new { @class = "form-control" })

                        </fieldset>
                    </div>


          
                            <div class="update-btn-container">
                                <button type="button" class="btn btn-primary update-button">Update</button>
                                <input type="submit" value="Submit" class="btn btn-default save-button" />
                            </div>
           

                    }
                </div>

            </div>
        </div>
    </div>


    <script>
        const updateButton = document.querySelector(".update-button");
        const saveButton = document.querySelector(".save-button");
        const inputField = document.querySelectorAll(".disabled-field")

        let isFieldDisabled = true;

        //check tempdata if has exist, show sweet alert
        if ('@ViewBag.alertMessage' == "updated") {
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 2000,
                padding: '2em',
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                },

            })

            Toast.fire({
                icon: 'success',
                title: 'Updated successfully',

            })


        }

        const changeFieldSet = function (props) {
            for (const field of inputField) {
                field.disabled = props;
            }
            isFieldDisabled = props;
        }



        const changeSaveButton = function (props) {
            saveButton.style.display = `${ props }`;
        }
        changeSaveButton("none")


        //when update button click, loop through fieldset then set disabled to false
        updateButton.addEventListener("click", function (event) {
            isFieldDisabled ? (changeFieldSet(false), this.innerHTML = "Cancel", changeSaveButton("inline-block")) :
                (changeFieldSet(true), this.innerHTML = "Update", changeSaveButton("none"));


        })

    </script>
</body>
</html>
